{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenCDA Documentation Welcome to the OpenCDA documentation. OpenCDA is a generalized open-source framework encapsulated with multi-resolution simulations for Cooperative Driving Automation research. This home page contains an index of the different sections in the documentation. Install OpenCDA. Please follow the OpenCDA installation to install the latest OpenCDA release. Use OpenCDA. This section instroduces the general workflow of running scenarios with OpenCDA. Available API. there is a handy Python API reference to look up the classes and methods available. OpenCDA is a work in prgress, we welcome your input and please visit out Github repo for latest release. OpenCDA Github Getting started Introduction \u2014 What to expect from OpenCDA. Installation \u2014 Configure enviroment and install OpenCDA on your local machine. Working with OpenCDA Software Structure \u2014 Understand the general structure of OpenCDA. Examples \u2014 Pre-defined scenarios that demenstrates the OpenCDA workflow. Python API Reference \u2014 An exclusive list of available Python classes and methods in the Python API. Existing Benchmarks \u2014 Existing algortihms that handles cooperative driving automation scenarios. Cite Our Work If you use OpenCDA for academic research, you are highly encouraged to cite our paper: Runsheng Xu, Yi Guo, Xu Han, Xin Xia, Jiaqi Ma, \"OpenCDA:An Open Cooperative Driving Automation FrameworkIntegrated with Multi-resolution Simulations\" If you use the benchmarks, you are highly encouraged to cite our paper: Runsheng Xu, Yi Guo, Xu Han, Xin Xia, Jiaqi Ma, \"OpenCDA:An Open Cooperative Driving Automation FrameworkIntegrated with Multi-resolution Simulations\"","title":"Home"},{"location":"#opencda-documentation","text":"Welcome to the OpenCDA documentation. OpenCDA is a generalized open-source framework encapsulated with multi-resolution simulations for Cooperative Driving Automation research. This home page contains an index of the different sections in the documentation. Install OpenCDA. Please follow the OpenCDA installation to install the latest OpenCDA release. Use OpenCDA. This section instroduces the general workflow of running scenarios with OpenCDA. Available API. there is a handy Python API reference to look up the classes and methods available. OpenCDA is a work in prgress, we welcome your input and please visit out Github repo for latest release. OpenCDA Github","title":"OpenCDA Documentation"},{"location":"#getting-started","text":"Introduction \u2014 What to expect from OpenCDA. Installation \u2014 Configure enviroment and install OpenCDA on your local machine.","title":"Getting started"},{"location":"#working-with-opencda","text":"Software Structure \u2014 Understand the general structure of OpenCDA. Examples \u2014 Pre-defined scenarios that demenstrates the OpenCDA workflow. Python API Reference \u2014 An exclusive list of available Python classes and methods in the Python API. Existing Benchmarks \u2014 Existing algortihms that handles cooperative driving automation scenarios.","title":"Working with OpenCDA"},{"location":"#cite-our-work","text":"If you use OpenCDA for academic research, you are highly encouraged to cite our paper: Runsheng Xu, Yi Guo, Xu Han, Xin Xia, Jiaqi Ma, \"OpenCDA:An Open Cooperative Driving Automation FrameworkIntegrated with Multi-resolution Simulations\" If you use the benchmarks, you are highly encouraged to cite our paper: Runsheng Xu, Yi Guo, Xu Han, Xin Xia, Jiaqi Ma, \"OpenCDA:An Open Cooperative Driving Automation FrameworkIntegrated with Multi-resolution Simulations\"","title":"Cite Our Work"},{"location":"OpenCDA_benchmark/","text":"OpenCDA Benchmark","title":"Benchmarks"},{"location":"OpenCDA_benchmark/#opencda-benchmark","text":"","title":"OpenCDA Benchmark"},{"location":"OpenCDA_examples/","text":"OpenCDA Examples","title":"Examples"},{"location":"OpenCDA_examples/#opencda-examples","text":"","title":"OpenCDA Examples"},{"location":"OpenCDA_installation/","text":"OpenCDA Installation Installation summary Requirements CARLA installation 1. Debian CARLA installation 2. Package installation 3. Build from source SUMO installation 1. Download SUMO 2. Installation Python Package Install OpenCDA 1. Install CARLA as Python package 2. Import CARLA for Conda Users 3. Install OpenCDA Running CARLA Follow-up Installation summary This installation guide shows how to download and running OpenCDA in your lcoal enviroment. OpenCDA is a generalized frame-work that encapsulated both CARLA and SUMO as simulation platform. With OpenCDA, users can conveniently replace any default module with customized algorithms or protocols and perform evaluations. A concrete example of platooning implementation will be used to illustrate the framework's utility for CDA research. Requirements To get started, the following requirements should be fullfilled. * System requirements. Any 64-bits OS should run OpenCDA. We highly recommends Ubuntu 18.04. Adequate GPU. CARLA is a realistic simulation platform based on Unity, which requires at least a 6GB GPU for smooth redering, though 8GB is recommended. Disk Space. Estimate 30GB of space is recomended. Python 3. Python is the main script language in CARLA, SUMO and OpenCDA. OpenCDA provide easy scenario declaration through yaml, but Python3 is required for normal operation. Simulation platform. It is necessary to install CARLA and SUMO as OpenCDA uses them as main simulation platform. Python Version Control. We recommend to use Anaconda or Miniconda for handeling multiple Python versions in parallel enviroments. Other requirements. Two Python modules: Pygame to create graphics directly with Python, and Numpy for great calculus. To install both modules using pip , run the following commands. pip install --user pygame numpy CARLA Installation The Debian installation is the easiest way to get the latest release in Linux. Download the GitHub repository to get either a specific release or the Windows version of CARLA. 1. Debian CARLA installation Set up the Debian repository in the system. sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1AF1527DE64CB8D9 sudo add-apt-repository deb [arch=amd64] http://dist.carla.org/carla $(lsb_release -sc) main Install CARLA and check for the installation in the /opt/ folder. sudo apt-get update # Update the Debian package index sudo apt-get install carla-simulator # Install the latest CARLA version, or update the current installation cd /opt/carla-simulator # Open the folder where CARLA is installed This repository contains CARLA 0.9.10 and later versions. To install a specific version add the version tag to the installation command. sudo apt-get install carla-simulator=0.9.10-1 # In this case, 0.9.10 refers to a CARLA version, and 1 to the Debian revision 2. Package installation CARLA repository The repository contains different versions of the CARLA simulator available. The OpenCDA is developed with CARLA 0.9.11, and we recommend this version for any OpenCDA usage. For more information about different versions or releases, please visit CARLA installation guide . To insall CARLA as a precompiled package, download and extract the release file. It contains a precompiled version of the simulator, the Python API module and some scripts to be used as examples. 3. Build From Source For advanced CARLA usage that involves extensive customizations, Build CARLA from Source is also supported by OpenCDA. Though source build in Windows OS is supported by CARLA, Ubuntu is the preferred OS as the OpenCDA was developoed in Ubuntu 18.04. ** Note: OpenCDA do not require CARLA source build. However, custom map ingestion in CARLA may require source build or a docker image. Visit CARLA's tutorial \"ADD a new map\" for more information. SUMO Installation To implement SUMO with OpenCDA alongside CARLA, it is required to install latest version of SUMO and the corresponding Python package. 1. Download SUMO Download the most recent sumo to your ubuntu. sudo add-apt-repository ppa:sumo/stable sudo apt-get update sudo apt-get install sumo sumo-tools sumo-doc For more information or earlier releases of SUMO, please refer to the SUMO documentation . 2. Install Python packages Starting with SUMO 1.8.0 the installation is possible from Python packaging index . You can use pip to install the full python package. pip install eclipse-sumo Alternatively, install an indiviaul package from the SUMO Python package stack(i.e., traci, libsumo, and sumolib) is also supported. pip install package-name-to-install For OpenCDA, we recommend install the full SUMO Python package. OpenCDA Installation Before installing OpenCDA, please verify the CARLA and SUMO installation status. OpenCDA uses CARLA as main simulation paltform, hence importing CARLA from its root directory is necessary. 1. Install CARLA as Python package To make CARLA importable, it is necessary to install CARLA as a individual python package. cd your-path-to-carla /PythonAPI/carla/dist unzip carla- your-carla-version -py3.6-linux-x86_64.egg -d carla- your-carla-version -py3.6-linux-x86_64 cd carla- your-carla-version -py3.6-linux-x86_64 Next, creat a python file with the name \"setup.py\", and copy the following contents. from distutils.core import setup setup(name='carla', version='0.9.10', py_modules=['carla'], ) Once the setup file has been created, install CARLA using pip . pip3 install -e your-path-to-carla /PythonAPI/carla/dist/carla- your-carla-version -py3.6-linux-x86_64 This method is valid for all CARLA installation method including source build. Alternatively, it is possible to declare the path to the egg file at the beginning of the script before import CARLA. Please refer to the Python examples provided by CARLA for more details. 2. Import CARLA for Conda Users If you have a dedicated conda enviroment for running OpenCDA. Please refer to the previous sections to install CARLA inside the corresponding conda enviroment to make CARLA importable from any directory. conda activate your-env-name pip3 install -e your-path-to-carla /PythonAPI/carla/dist/carla- your-carla-version -py3.6-linux-x86_64 3. Install OpenCDA TO isntall OpenCDA, please download the latest release of OpenCDA from our github repository. git clone https://github.com/ucla-mobility/OpenCDA cd OpenCDA Quickstart Examples We provide quickstart examples to help users understanding how to execute a testing scenario. All pre-defined scenarios are located at directory \"OpenCDA/scenario_testing\" . To start a scenario, simple run the following command fron terminal: cd your-path-to-OpenCDA /scenario_testing python3 scenario-name .py To configure the parameters of pre-defined scebarios, such as vehicle spawned location, activated sensor suite, vehicle controller, vehicle behavior, and traffic manager settings, navigate to cd your-path-to-OpenCDA /scenario_testing/config_yaml/ your-scenario-name .yaml and reconfigure the parameters in the yaml file of the corresponding scenario.","title":"Installation"},{"location":"OpenCDA_installation/#opencda-installation","text":"Installation summary Requirements CARLA installation 1. Debian CARLA installation 2. Package installation 3. Build from source SUMO installation 1. Download SUMO 2. Installation Python Package Install OpenCDA 1. Install CARLA as Python package 2. Import CARLA for Conda Users 3. Install OpenCDA Running CARLA Follow-up","title":"OpenCDA Installation"},{"location":"OpenCDA_installation/#installation-summary","text":"This installation guide shows how to download and running OpenCDA in your lcoal enviroment. OpenCDA is a generalized frame-work that encapsulated both CARLA and SUMO as simulation platform. With OpenCDA, users can conveniently replace any default module with customized algorithms or protocols and perform evaluations. A concrete example of platooning implementation will be used to illustrate the framework's utility for CDA research.","title":"Installation summary"},{"location":"OpenCDA_installation/#requirements","text":"To get started, the following requirements should be fullfilled. * System requirements. Any 64-bits OS should run OpenCDA. We highly recommends Ubuntu 18.04. Adequate GPU. CARLA is a realistic simulation platform based on Unity, which requires at least a 6GB GPU for smooth redering, though 8GB is recommended. Disk Space. Estimate 30GB of space is recomended. Python 3. Python is the main script language in CARLA, SUMO and OpenCDA. OpenCDA provide easy scenario declaration through yaml, but Python3 is required for normal operation. Simulation platform. It is necessary to install CARLA and SUMO as OpenCDA uses them as main simulation platform. Python Version Control. We recommend to use Anaconda or Miniconda for handeling multiple Python versions in parallel enviroments. Other requirements. Two Python modules: Pygame to create graphics directly with Python, and Numpy for great calculus. To install both modules using pip , run the following commands. pip install --user pygame numpy","title":"Requirements"},{"location":"OpenCDA_installation/#carla-installation","text":"The Debian installation is the easiest way to get the latest release in Linux. Download the GitHub repository to get either a specific release or the Windows version of CARLA.","title":"CARLA Installation"},{"location":"OpenCDA_installation/#1-debian-carla-installation","text":"Set up the Debian repository in the system. sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1AF1527DE64CB8D9 sudo add-apt-repository deb [arch=amd64] http://dist.carla.org/carla $(lsb_release -sc) main Install CARLA and check for the installation in the /opt/ folder. sudo apt-get update # Update the Debian package index sudo apt-get install carla-simulator # Install the latest CARLA version, or update the current installation cd /opt/carla-simulator # Open the folder where CARLA is installed This repository contains CARLA 0.9.10 and later versions. To install a specific version add the version tag to the installation command. sudo apt-get install carla-simulator=0.9.10-1 # In this case, 0.9.10 refers to a CARLA version, and 1 to the Debian revision","title":"1. Debian CARLA installation"},{"location":"OpenCDA_installation/#2-package-installation","text":"CARLA repository The repository contains different versions of the CARLA simulator available. The OpenCDA is developed with CARLA 0.9.11, and we recommend this version for any OpenCDA usage. For more information about different versions or releases, please visit CARLA installation guide . To insall CARLA as a precompiled package, download and extract the release file. It contains a precompiled version of the simulator, the Python API module and some scripts to be used as examples.","title":"2. Package installation"},{"location":"OpenCDA_installation/#3-build-from-source","text":"For advanced CARLA usage that involves extensive customizations, Build CARLA from Source is also supported by OpenCDA. Though source build in Windows OS is supported by CARLA, Ubuntu is the preferred OS as the OpenCDA was developoed in Ubuntu 18.04. ** Note: OpenCDA do not require CARLA source build. However, custom map ingestion in CARLA may require source build or a docker image. Visit CARLA's tutorial \"ADD a new map\" for more information.","title":"3. Build From Source"},{"location":"OpenCDA_installation/#sumo-installation","text":"To implement SUMO with OpenCDA alongside CARLA, it is required to install latest version of SUMO and the corresponding Python package.","title":"SUMO Installation"},{"location":"OpenCDA_installation/#1-download-sumo","text":"Download the most recent sumo to your ubuntu. sudo add-apt-repository ppa:sumo/stable sudo apt-get update sudo apt-get install sumo sumo-tools sumo-doc For more information or earlier releases of SUMO, please refer to the SUMO documentation .","title":"1. Download SUMO"},{"location":"OpenCDA_installation/#2-install-python-packages","text":"Starting with SUMO 1.8.0 the installation is possible from Python packaging index . You can use pip to install the full python package. pip install eclipse-sumo Alternatively, install an indiviaul package from the SUMO Python package stack(i.e., traci, libsumo, and sumolib) is also supported. pip install package-name-to-install For OpenCDA, we recommend install the full SUMO Python package.","title":"2. Install Python packages"},{"location":"OpenCDA_installation/#opencda-installation_1","text":"Before installing OpenCDA, please verify the CARLA and SUMO installation status. OpenCDA uses CARLA as main simulation paltform, hence importing CARLA from its root directory is necessary.","title":"OpenCDA Installation"},{"location":"OpenCDA_installation/#1-install-carla-as-python-package","text":"To make CARLA importable, it is necessary to install CARLA as a individual python package. cd your-path-to-carla /PythonAPI/carla/dist unzip carla- your-carla-version -py3.6-linux-x86_64.egg -d carla- your-carla-version -py3.6-linux-x86_64 cd carla- your-carla-version -py3.6-linux-x86_64 Next, creat a python file with the name \"setup.py\", and copy the following contents. from distutils.core import setup setup(name='carla', version='0.9.10', py_modules=['carla'], ) Once the setup file has been created, install CARLA using pip . pip3 install -e your-path-to-carla /PythonAPI/carla/dist/carla- your-carla-version -py3.6-linux-x86_64 This method is valid for all CARLA installation method including source build. Alternatively, it is possible to declare the path to the egg file at the beginning of the script before import CARLA. Please refer to the Python examples provided by CARLA for more details.","title":"1. Install CARLA as Python package"},{"location":"OpenCDA_installation/#2-import-carla-for-conda-users","text":"If you have a dedicated conda enviroment for running OpenCDA. Please refer to the previous sections to install CARLA inside the corresponding conda enviroment to make CARLA importable from any directory. conda activate your-env-name pip3 install -e your-path-to-carla /PythonAPI/carla/dist/carla- your-carla-version -py3.6-linux-x86_64","title":"2. Import CARLA for Conda Users"},{"location":"OpenCDA_installation/#3-install-opencda","text":"TO isntall OpenCDA, please download the latest release of OpenCDA from our github repository. git clone https://github.com/ucla-mobility/OpenCDA cd OpenCDA","title":"3. Install OpenCDA"},{"location":"OpenCDA_installation/#quickstart-examples","text":"We provide quickstart examples to help users understanding how to execute a testing scenario. All pre-defined scenarios are located at directory \"OpenCDA/scenario_testing\" . To start a scenario, simple run the following command fron terminal: cd your-path-to-OpenCDA /scenario_testing python3 scenario-name .py To configure the parameters of pre-defined scebarios, such as vehicle spawned location, activated sensor suite, vehicle controller, vehicle behavior, and traffic manager settings, navigate to cd your-path-to-OpenCDA /scenario_testing/config_yaml/ your-scenario-name .yaml and reconfigure the parameters in the yaml file of the corresponding scenario.","title":"Quickstart Examples"},{"location":"OpenCDA_introduction/","text":"OpenCDA OpenCDA provides a full-stacksoftware that contains the common self-driving modulescomposed of sensing, computation, and actuation capabili-ties, and it is developed purely in Python. Built ponthese basic modules, OpenCDA supports a range of commoncooperative driving applications, such as platooning, co-operative sensing, cooperative merge, speed harmonization,and so on. More importantly, OpenCDA offers a scenario database that includes various standard scenarios for different cooperative driving applications as benchmarks. Userscan easily replace any predefined guidance algorithms orprotocols in any default module in OpenCDA with theirown designs and test them in the supplied scenarios. Simulator Platforms We selected CARLA and SUMO as our multi-resolutionsimulation platforms. CARLA offers realistic scene rendering, vehicle dynamics, and sensor modeling, while SUMO's scope lies in generating large-scale practical background traffic and providing macroscopic level evaluation. Customize Scenarios OpenCDA offers a scenario database that includes various standard scenarios for different cooperative driving applications as benchmarks. Users can easily replace any predefined guidance algorithms or protocols in any default module in OpenCDA with their own designs and test them in the supplied scenarios. Modularity If users desire to make their own scenarios, OpenCDA also provides a simple API to support such customization. The existing API provide customization in sensor suites, driving automation, vehicle information, simulation information, platoon information, and custome intellogent controller.","title":"Introduction"},{"location":"OpenCDA_introduction/#opencda","text":"OpenCDA provides a full-stacksoftware that contains the common self-driving modulescomposed of sensing, computation, and actuation capabili-ties, and it is developed purely in Python. Built ponthese basic modules, OpenCDA supports a range of commoncooperative driving applications, such as platooning, co-operative sensing, cooperative merge, speed harmonization,and so on. More importantly, OpenCDA offers a scenario database that includes various standard scenarios for different cooperative driving applications as benchmarks. Userscan easily replace any predefined guidance algorithms orprotocols in any default module in OpenCDA with theirown designs and test them in the supplied scenarios.","title":"OpenCDA"},{"location":"OpenCDA_introduction/#simulator-platforms","text":"We selected CARLA and SUMO as our multi-resolutionsimulation platforms. CARLA offers realistic scene rendering, vehicle dynamics, and sensor modeling, while SUMO's scope lies in generating large-scale practical background traffic and providing macroscopic level evaluation.","title":"Simulator Platforms"},{"location":"OpenCDA_introduction/#customize-scenarios","text":"OpenCDA offers a scenario database that includes various standard scenarios for different cooperative driving applications as benchmarks. Users can easily replace any predefined guidance algorithms or protocols in any default module in OpenCDA with their own designs and test them in the supplied scenarios.","title":"Customize Scenarios"},{"location":"OpenCDA_introduction/#modularity","text":"If users desire to make their own scenarios, OpenCDA also provides a simple API to support such customization. The existing API provide customization in sensor suites, driving automation, vehicle information, simulation information, platoon information, and custome intellogent controller.","title":"Modularity"},{"location":"OpenCDA_structure/","text":"OpenCDA Structure","title":"Framework Structure"},{"location":"OpenCDA_structure/#opencda-structure","text":"","title":"OpenCDA Structure"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"python_api/","text":"OpenCDA Python API","title":"Python API"},{"location":"python_api/#opencda-python-api","text":"","title":"OpenCDA Python API"}]}